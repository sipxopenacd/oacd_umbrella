#!/bin/bash

BASEDIR="$( cd "$( dirname "$0" )" && pwd)"
PLUGINDIR="$BASEDIR/plugins"
ENABLED_PLUGINS_FILE="$BASEDIR/enabled_plugins"
CONFDIR="$BASEDIR/conf"
OACD_SCRIPT_CONFIG="$CONFDIR/oacd.cfg"
OACD_APP_CONFIG="$CONFDIR/sys.config"

ULON="\033[4m"
ULOFF="\033[0m"

start()
{
	ERL=erl
	NAMETYPE="-name"
	NAME="openacd@127.0.0.1"
	COOKIE="oucxdevcookie"

	RUNDIR="$BASEDIR"/run
	DBDIR="$RUNDIR"/db
	LOGDIR="$RUNDIR"/log

	KEY="$RUNDIR"/key
	SYSCONFIG="$RUNDIR"/etc/sys.config

	export ERL_CRASH_DUMP="$LOGDIR"/erlang_crash.dump

	mkdir -p "$RUNDIR"
	mkdir -p "$DBDIR"
	mkdir -p "$LOGDIR"

	export OA_RUN_DIR="$RUNDIR"

	if [ -f "$OACD_SCRIPT_CONFIG" ]; then
	    . "$OACD_SCRIPT_CONFIG"
	fi
	if [ ! -f "$KEY" ]; then
		echo "RSA key does not exist, generating..."
		ssh-keygen -t rsa -f "$KEY" -N ""
		RES=$?
		if [ $RES != 0 ]; then
			echo "Key generation failed with error $RES!"
			exit $RES
		fi
	fi

	if [ ! -f "$SYSCONFIG" ]; then
		mkdir -p `dirname $SYSCONFIG`
		ln -sf "$OACD_APP_CONFIG" "$SYSCONFIG"

# 		CONFIGNODENAME=`erl -eval "io:format(\"~s\",[node()]),halt(1)" -name $NAME -noshell`
# 		cat > "$SYSCONFIG" <<EOF
# [{'oacd_core', [
# 	{nodes, ['$CONFIGNODENAME']}
# 	, {console_loglevel, info}
# 	, {logfiles, [{"$LOGDIR/openacd.log", debug}]}
# 	, {plugins, []}
# ]},
# {sasl, [
# 	{errlog_type, error} % disable SASL progress reports
# ]}].
# EOF
	fi

	export ERL_LIBS="$BASEDIR"/deps:"$BASEDIR"/core:"$BASEDIR"/plugins:$ERL_LIBS
	exec erl -s openacd -config "$SYSCONFIG" "$NAMETYPE" "$NAME" -setcookie $COOKIE -mnesia dir \""$DBDIR"\"
}

add_plugin()
{
	if [ "$#" -lt 1 ]; then
		err_exit "missing name and git-repo operand"
	fi
	if [ "$#" -lt 2 ]; then
		err_exit "missing git-repo operand"
	fi

	PLUGIN="$1"
	PLUGIN_REPO="$2"
	PLUGIN_PATH="$PLUGINDIR/$PLUGIN"
	echo "Cloning $PLUGIN from $PLUGIN_REPO into $PLUGIN_PATH"

	git clone "$PLUGIN_REPO" "$PLUGIN_PATH" ${@:3:$#}
}

create_plugin()
{
	if [ "$#" -lt 1 ]; then
		err_exit "missing name operand"
	fi

	PLUGIN="$1"
	PLUGIN_PATH="$PLUGINDIR/$PLUGIN"
	echo "Creating rebar app for $PLUGIN in $PLUGIN_PATH"

	mkdir -p "$PLUGIN_PATH"
	cd "$PLUGIN_PATH"
	$BASEDIR/rebar create-app appid="$PLUGIN"
}

enable_plugin()
{
	if [ "$#" -lt 1 ]; then
		err_exit "missing name operand"
	fi

	PLUGIN="$1"
	echo "Enabling $PLUGIN plugin"
	echo "$PLUGIN" >> "$ENABLED_PLUGINS_FILE"
}

disable_plugin()
{
	if [ "$#" -lt 1 ]; then
		err_exit "missing name operand"
	fi

	PLUGIN="$1"
	echo "Disabling $PLUGIN plugin"

	grep -v "^$PLUGIN$" "$ENABLED_PLUGINS_FILE" > "$ENABLED_PLUGINS_FILE.tmp"
	mv "$ENABLED_PLUGINS_FILE.tmp" "$ENABLED_PLUGINS_FILE"
}

usage()
{
	echo "List of commands"
	echo ""
	echo "  start"
	echo ""
	echo -e "  add-plugin ${ULON}name${ULOFF} ${ULON}git-repo${ULOFF}"
	echo -e "  create-plugin ${ULON}name${ULOFF}"
	echo ""
}

err_exit()
{
	echo "oacd: $*"
	exit 1
}

CMD="$1"
shift
case "$CMD" in
	'add-plugin') add_plugin $*;;
	'create-plugin') create_plugin $*;;
	'enable-plugin') enable_plugin $*;;
	'disable-plugin') disable_plugin $*;;
	'start') start;;
	*) usage;;
esac


